{"ast":null,"code":"var _jsxFileName = \"/Users/boazd_000/Documents/COSC484/chatrepo/COSC484-Yearbook-Site/Chatroom/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nconst express = require('express');\n\nconst app = express();\n\nconst http = require('http').Server(app);\n\nconst path = require('path');\n\nconst io = require('socket.io')(http);\n\nconst uri = process.env.MONGODB_URI;\nconst port = process.env.PORT || 5000;\n\nconst Message = require('./Message');\n\nconst mongoose = require('mongoose');\n\nmongoose.connect(uri, {\n  useUnifiedTopology: true,\n  useNewUrlParser: true\n});\napp.use(express.static(path.join(__dirname, '..', 'client', 'build')));\nio.on('connection', socket => {\n  // Get the last 10 messages from the database.\n  Message.find().sort({\n    createdAt: -1\n  }).limit(10).exec((err, messages) => {\n    if (err) return console.error(err); // Send the last messages to the user.\n\n    socket.emit('init', messages);\n  }); // Listen to connected users for a new message.\n\n  socket.on('message', msg => {\n    // Create a message with the content and the name of the user.\n    const message = new Message({\n      content: msg.content,\n      name: msg.name\n    }); // Save the message to the database.\n\n    message.save(err => {\n      if (err) return console.error(err);\n    }); // Notify all other users about a new message.\n\n    socket.broadcast.emit('push', msg);\n  });\n});\nhttp.listen(port, () => {\n  console.log('listening on *:' + port);\n}); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["/Users/boazd_000/Documents/COSC484/chatrepo/COSC484-Yearbook-Site/Chatroom/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","render","document","getElementById","express","require","app","http","Server","path","io","uri","process","env","MONGODB_URI","port","PORT","Message","mongoose","connect","useUnifiedTopology","useNewUrlParser","use","static","join","__dirname","on","socket","find","sort","createdAt","limit","exec","err","messages","console","error","emit","msg","message","content","name","save","broadcast","listen","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEAF,QAAQ,CAACG,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF;;AAWA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGF,OAAO,EAAnB;;AACA,MAAMG,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgBG,MAAhB,CAAuBF,GAAvB,CAAb;;AACA,MAAMG,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,EAAE,GAAGL,OAAO,CAAC,WAAD,CAAP,CAAqBE,IAArB,CAAX;;AAEA,MAAMI,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAxB;AACA,MAAMC,IAAI,GAAGH,OAAO,CAACC,GAAR,CAAYG,IAAZ,IAAoB,IAAjC;;AAEA,MAAMC,OAAO,GAAGZ,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMa,QAAQ,GAAGb,OAAO,CAAC,UAAD,CAAxB;;AAEAa,QAAQ,CAACC,OAAT,CAAiBR,GAAjB,EAAsB;AACpBS,EAAAA,kBAAkB,EAAE,IADA;AAEpBC,EAAAA,eAAe,EAAE;AAFG,CAAtB;AAKAf,GAAG,CAACgB,GAAJ,CAAQlB,OAAO,CAACmB,MAAR,CAAed,IAAI,CAACe,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,QAA3B,EAAqC,OAArC,CAAf,CAAR;AAEAf,EAAE,CAACgB,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;AAE9B;AACAV,EAAAA,OAAO,CAACW,IAAR,GAAeC,IAAf,CAAoB;AAACC,IAAAA,SAAS,EAAE,CAAC;AAAb,GAApB,EAAqCC,KAArC,CAA2C,EAA3C,EAA+CC,IAA/C,CAAoD,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACrE,QAAID,GAAJ,EAAS,OAAOE,OAAO,CAACC,KAAR,CAAcH,GAAd,CAAP,CAD4D,CAGrE;;AACAN,IAAAA,MAAM,CAACU,IAAP,CAAY,MAAZ,EAAoBH,QAApB;AACD,GALD,EAH8B,CAU9B;;AACAP,EAAAA,MAAM,CAACD,EAAP,CAAU,SAAV,EAAsBY,GAAD,IAAS;AAC5B;AACA,UAAMC,OAAO,GAAG,IAAItB,OAAJ,CAAY;AAC1BuB,MAAAA,OAAO,EAAEF,GAAG,CAACE,OADa;AAE1BC,MAAAA,IAAI,EAAEH,GAAG,CAACG;AAFgB,KAAZ,CAAhB,CAF4B,CAO5B;;AACAF,IAAAA,OAAO,CAACG,IAAR,CAAcT,GAAD,IAAS;AACpB,UAAIA,GAAJ,EAAS,OAAOE,OAAO,CAACC,KAAR,CAAcH,GAAd,CAAP;AACV,KAFD,EAR4B,CAY5B;;AACAN,IAAAA,MAAM,CAACgB,SAAP,CAAiBN,IAAjB,CAAsB,MAAtB,EAA8BC,GAA9B;AACD,GAdD;AAeD,CA1BD;AA4BA/B,IAAI,CAACqC,MAAL,CAAY7B,IAAZ,EAAkB,MAAM;AACtBoB,EAAAA,OAAO,CAACU,GAAR,CAAY,oBAAoB9B,IAAhC;AACD,CAFD,E,CAIA;AACA;AACA;;AACAf,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\nconst express = require('express');\nconst app = express();\nconst http = require('http').Server(app);\nconst path = require('path');\nconst io = require('socket.io')(http);\n\nconst uri = process.env.MONGODB_URI;\nconst port = process.env.PORT || 5000;\n\nconst Message = require('./Message');\nconst mongoose = require('mongoose');\n\nmongoose.connect(uri, {\n  useUnifiedTopology: true,\n  useNewUrlParser: true,\n});\n\napp.use(express.static(path.join(__dirname, '..', 'client', 'build')));\n\nio.on('connection', (socket) => {\n\n  // Get the last 10 messages from the database.\n  Message.find().sort({createdAt: -1}).limit(10).exec((err, messages) => {\n    if (err) return console.error(err);\n\n    // Send the last messages to the user.\n    socket.emit('init', messages);\n  });\n\n  // Listen to connected users for a new message.\n  socket.on('message', (msg) => {\n    // Create a message with the content and the name of the user.\n    const message = new Message({\n      content: msg.content,\n      name: msg.name,\n    });\n\n    // Save the message to the database.\n    message.save((err) => {\n      if (err) return console.error(err);\n    });\n\n    // Notify all other users about a new message.\n    socket.broadcast.emit('push', msg);\n  });\n});\n\nhttp.listen(port, () => {\n  console.log('listening on *:' + port);\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}